/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef bbip_H
#define bbip_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "bbip_types.h"

namespace bilibili {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class bbipIf {
 public:
  virtual ~bbipIf() {}

  /**
   * A method definition looks like C code. It has a return type, arguments,
   * and optionally a list of exceptions that it may throw. Note that argument
   * lists and exception lists are specified using the exact same syntax as
   * field lists in struct or exception definitions.
   */
  virtual void ping() = 0;
  virtual int32_t count() = 0;
  virtual void query(bbip_result& _return, const std::string& string_ip) = 0;
  virtual void query_string(std::string& _return, const std::string& string_ip) = 0;
  virtual int16_t GetAreaFlag(const std::string& string_ip) = 0;
  virtual int64_t GetZoneID(const std::string& string_ip) = 0;
  virtual void query_long(bbip_result& _return, const int64_t int_ip) = 0;
};

class bbipIfFactory {
 public:
  typedef bbipIf Handler;

  virtual ~bbipIfFactory() {}

  virtual bbipIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(bbipIf* /* handler */) = 0;
};

class bbipIfSingletonFactory : virtual public bbipIfFactory {
 public:
  bbipIfSingletonFactory(const boost::shared_ptr<bbipIf>& iface) : iface_(iface) {}
  virtual ~bbipIfSingletonFactory() {}

  virtual bbipIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(bbipIf* /* handler */) {}

 protected:
  boost::shared_ptr<bbipIf> iface_;
};

class bbipNull : virtual public bbipIf {
 public:
  virtual ~bbipNull() {}
  void ping() {
    return;
  }
  int32_t count() {
    int32_t _return = 0;
    return _return;
  }
  void query(bbip_result& /* _return */, const std::string& /* string_ip */) {
    return;
  }
  void query_string(std::string& /* _return */, const std::string& /* string_ip */) {
    return;
  }
  int16_t GetAreaFlag(const std::string& /* string_ip */) {
    int16_t _return = 0;
    return _return;
  }
  int64_t GetZoneID(const std::string& /* string_ip */) {
    int64_t _return = 0;
    return _return;
  }
  void query_long(bbip_result& /* _return */, const int64_t /* int_ip */) {
    return;
  }
};


class bbip_ping_args {
 public:

  bbip_ping_args(const bbip_ping_args&);
  bbip_ping_args& operator=(const bbip_ping_args&);
  bbip_ping_args() {
  }

  virtual ~bbip_ping_args() throw();

  bool operator == (const bbip_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const bbip_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const bbip_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class bbip_ping_pargs {
 public:


  virtual ~bbip_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class bbip_ping_result {
 public:

  bbip_ping_result(const bbip_ping_result&);
  bbip_ping_result& operator=(const bbip_ping_result&);
  bbip_ping_result() {
  }

  virtual ~bbip_ping_result() throw();

  bool operator == (const bbip_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const bbip_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const bbip_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class bbip_ping_presult {
 public:


  virtual ~bbip_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class bbip_count_args {
 public:

  bbip_count_args(const bbip_count_args&);
  bbip_count_args& operator=(const bbip_count_args&);
  bbip_count_args() {
  }

  virtual ~bbip_count_args() throw();

  bool operator == (const bbip_count_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const bbip_count_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const bbip_count_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class bbip_count_pargs {
 public:


  virtual ~bbip_count_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _bbip_count_result__isset {
  _bbip_count_result__isset() : success(false) {}
  bool success :1;
} _bbip_count_result__isset;

class bbip_count_result {
 public:

  bbip_count_result(const bbip_count_result&);
  bbip_count_result& operator=(const bbip_count_result&);
  bbip_count_result() : success(0) {
  }

  virtual ~bbip_count_result() throw();
  int32_t success;

  _bbip_count_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const bbip_count_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const bbip_count_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const bbip_count_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _bbip_count_presult__isset {
  _bbip_count_presult__isset() : success(false) {}
  bool success :1;
} _bbip_count_presult__isset;

class bbip_count_presult {
 public:


  virtual ~bbip_count_presult() throw();
  int32_t* success;

  _bbip_count_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _bbip_query_args__isset {
  _bbip_query_args__isset() : string_ip(false) {}
  bool string_ip :1;
} _bbip_query_args__isset;

class bbip_query_args {
 public:

  bbip_query_args(const bbip_query_args&);
  bbip_query_args& operator=(const bbip_query_args&);
  bbip_query_args() : string_ip() {
  }

  virtual ~bbip_query_args() throw();
  std::string string_ip;

  _bbip_query_args__isset __isset;

  void __set_string_ip(const std::string& val);

  bool operator == (const bbip_query_args & rhs) const
  {
    if (!(string_ip == rhs.string_ip))
      return false;
    return true;
  }
  bool operator != (const bbip_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const bbip_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class bbip_query_pargs {
 public:


  virtual ~bbip_query_pargs() throw();
  const std::string* string_ip;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _bbip_query_result__isset {
  _bbip_query_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _bbip_query_result__isset;

class bbip_query_result {
 public:

  bbip_query_result(const bbip_query_result&);
  bbip_query_result& operator=(const bbip_query_result&);
  bbip_query_result() {
  }

  virtual ~bbip_query_result() throw();
  bbip_result success;
  InvalidOperation ouch;

  _bbip_query_result__isset __isset;

  void __set_success(const bbip_result& val);

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const bbip_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const bbip_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const bbip_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _bbip_query_presult__isset {
  _bbip_query_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _bbip_query_presult__isset;

class bbip_query_presult {
 public:


  virtual ~bbip_query_presult() throw();
  bbip_result* success;
  InvalidOperation ouch;

  _bbip_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _bbip_query_string_args__isset {
  _bbip_query_string_args__isset() : string_ip(false) {}
  bool string_ip :1;
} _bbip_query_string_args__isset;

class bbip_query_string_args {
 public:

  bbip_query_string_args(const bbip_query_string_args&);
  bbip_query_string_args& operator=(const bbip_query_string_args&);
  bbip_query_string_args() : string_ip() {
  }

  virtual ~bbip_query_string_args() throw();
  std::string string_ip;

  _bbip_query_string_args__isset __isset;

  void __set_string_ip(const std::string& val);

  bool operator == (const bbip_query_string_args & rhs) const
  {
    if (!(string_ip == rhs.string_ip))
      return false;
    return true;
  }
  bool operator != (const bbip_query_string_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const bbip_query_string_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class bbip_query_string_pargs {
 public:


  virtual ~bbip_query_string_pargs() throw();
  const std::string* string_ip;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _bbip_query_string_result__isset {
  _bbip_query_string_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _bbip_query_string_result__isset;

class bbip_query_string_result {
 public:

  bbip_query_string_result(const bbip_query_string_result&);
  bbip_query_string_result& operator=(const bbip_query_string_result&);
  bbip_query_string_result() : success() {
  }

  virtual ~bbip_query_string_result() throw();
  std::string success;
  InvalidOperation ouch;

  _bbip_query_string_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const bbip_query_string_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const bbip_query_string_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const bbip_query_string_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _bbip_query_string_presult__isset {
  _bbip_query_string_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _bbip_query_string_presult__isset;

class bbip_query_string_presult {
 public:


  virtual ~bbip_query_string_presult() throw();
  std::string* success;
  InvalidOperation ouch;

  _bbip_query_string_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _bbip_GetAreaFlag_args__isset {
  _bbip_GetAreaFlag_args__isset() : string_ip(false) {}
  bool string_ip :1;
} _bbip_GetAreaFlag_args__isset;

class bbip_GetAreaFlag_args {
 public:

  bbip_GetAreaFlag_args(const bbip_GetAreaFlag_args&);
  bbip_GetAreaFlag_args& operator=(const bbip_GetAreaFlag_args&);
  bbip_GetAreaFlag_args() : string_ip() {
  }

  virtual ~bbip_GetAreaFlag_args() throw();
  std::string string_ip;

  _bbip_GetAreaFlag_args__isset __isset;

  void __set_string_ip(const std::string& val);

  bool operator == (const bbip_GetAreaFlag_args & rhs) const
  {
    if (!(string_ip == rhs.string_ip))
      return false;
    return true;
  }
  bool operator != (const bbip_GetAreaFlag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const bbip_GetAreaFlag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class bbip_GetAreaFlag_pargs {
 public:


  virtual ~bbip_GetAreaFlag_pargs() throw();
  const std::string* string_ip;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _bbip_GetAreaFlag_result__isset {
  _bbip_GetAreaFlag_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _bbip_GetAreaFlag_result__isset;

class bbip_GetAreaFlag_result {
 public:

  bbip_GetAreaFlag_result(const bbip_GetAreaFlag_result&);
  bbip_GetAreaFlag_result& operator=(const bbip_GetAreaFlag_result&);
  bbip_GetAreaFlag_result() : success(0) {
  }

  virtual ~bbip_GetAreaFlag_result() throw();
  int16_t success;
  InvalidOperation ouch;

  _bbip_GetAreaFlag_result__isset __isset;

  void __set_success(const int16_t val);

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const bbip_GetAreaFlag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const bbip_GetAreaFlag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const bbip_GetAreaFlag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _bbip_GetAreaFlag_presult__isset {
  _bbip_GetAreaFlag_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _bbip_GetAreaFlag_presult__isset;

class bbip_GetAreaFlag_presult {
 public:


  virtual ~bbip_GetAreaFlag_presult() throw();
  int16_t* success;
  InvalidOperation ouch;

  _bbip_GetAreaFlag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _bbip_GetZoneID_args__isset {
  _bbip_GetZoneID_args__isset() : string_ip(false) {}
  bool string_ip :1;
} _bbip_GetZoneID_args__isset;

class bbip_GetZoneID_args {
 public:

  bbip_GetZoneID_args(const bbip_GetZoneID_args&);
  bbip_GetZoneID_args& operator=(const bbip_GetZoneID_args&);
  bbip_GetZoneID_args() : string_ip() {
  }

  virtual ~bbip_GetZoneID_args() throw();
  std::string string_ip;

  _bbip_GetZoneID_args__isset __isset;

  void __set_string_ip(const std::string& val);

  bool operator == (const bbip_GetZoneID_args & rhs) const
  {
    if (!(string_ip == rhs.string_ip))
      return false;
    return true;
  }
  bool operator != (const bbip_GetZoneID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const bbip_GetZoneID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class bbip_GetZoneID_pargs {
 public:


  virtual ~bbip_GetZoneID_pargs() throw();
  const std::string* string_ip;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _bbip_GetZoneID_result__isset {
  _bbip_GetZoneID_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _bbip_GetZoneID_result__isset;

class bbip_GetZoneID_result {
 public:

  bbip_GetZoneID_result(const bbip_GetZoneID_result&);
  bbip_GetZoneID_result& operator=(const bbip_GetZoneID_result&);
  bbip_GetZoneID_result() : success(0) {
  }

  virtual ~bbip_GetZoneID_result() throw();
  int64_t success;
  InvalidOperation ouch;

  _bbip_GetZoneID_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const bbip_GetZoneID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const bbip_GetZoneID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const bbip_GetZoneID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _bbip_GetZoneID_presult__isset {
  _bbip_GetZoneID_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _bbip_GetZoneID_presult__isset;

class bbip_GetZoneID_presult {
 public:


  virtual ~bbip_GetZoneID_presult() throw();
  int64_t* success;
  InvalidOperation ouch;

  _bbip_GetZoneID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _bbip_query_long_args__isset {
  _bbip_query_long_args__isset() : int_ip(false) {}
  bool int_ip :1;
} _bbip_query_long_args__isset;

class bbip_query_long_args {
 public:

  bbip_query_long_args(const bbip_query_long_args&);
  bbip_query_long_args& operator=(const bbip_query_long_args&);
  bbip_query_long_args() : int_ip(0) {
  }

  virtual ~bbip_query_long_args() throw();
  int64_t int_ip;

  _bbip_query_long_args__isset __isset;

  void __set_int_ip(const int64_t val);

  bool operator == (const bbip_query_long_args & rhs) const
  {
    if (!(int_ip == rhs.int_ip))
      return false;
    return true;
  }
  bool operator != (const bbip_query_long_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const bbip_query_long_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class bbip_query_long_pargs {
 public:


  virtual ~bbip_query_long_pargs() throw();
  const int64_t* int_ip;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _bbip_query_long_result__isset {
  _bbip_query_long_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _bbip_query_long_result__isset;

class bbip_query_long_result {
 public:

  bbip_query_long_result(const bbip_query_long_result&);
  bbip_query_long_result& operator=(const bbip_query_long_result&);
  bbip_query_long_result() {
  }

  virtual ~bbip_query_long_result() throw();
  bbip_result success;
  InvalidOperation ouch;

  _bbip_query_long_result__isset __isset;

  void __set_success(const bbip_result& val);

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const bbip_query_long_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const bbip_query_long_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const bbip_query_long_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _bbip_query_long_presult__isset {
  _bbip_query_long_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _bbip_query_long_presult__isset;

class bbip_query_long_presult {
 public:


  virtual ~bbip_query_long_presult() throw();
  bbip_result* success;
  InvalidOperation ouch;

  _bbip_query_long_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class bbipClient : virtual public bbipIf {
 public:
  bbipClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  bbipClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  int32_t count();
  void send_count();
  int32_t recv_count();
  void query(bbip_result& _return, const std::string& string_ip);
  void send_query(const std::string& string_ip);
  void recv_query(bbip_result& _return);
  void query_string(std::string& _return, const std::string& string_ip);
  void send_query_string(const std::string& string_ip);
  void recv_query_string(std::string& _return);
  int16_t GetAreaFlag(const std::string& string_ip);
  void send_GetAreaFlag(const std::string& string_ip);
  int16_t recv_GetAreaFlag();
  int64_t GetZoneID(const std::string& string_ip);
  void send_GetZoneID(const std::string& string_ip);
  int64_t recv_GetZoneID();
  void query_long(bbip_result& _return, const int64_t int_ip);
  void send_query_long(const int64_t int_ip);
  void recv_query_long(bbip_result& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class bbipProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<bbipIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (bbipProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query_string(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAreaFlag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetZoneID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query_long(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  bbipProcessor(boost::shared_ptr<bbipIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &bbipProcessor::process_ping;
    processMap_["count"] = &bbipProcessor::process_count;
    processMap_["query"] = &bbipProcessor::process_query;
    processMap_["query_string"] = &bbipProcessor::process_query_string;
    processMap_["GetAreaFlag"] = &bbipProcessor::process_GetAreaFlag;
    processMap_["GetZoneID"] = &bbipProcessor::process_GetZoneID;
    processMap_["query_long"] = &bbipProcessor::process_query_long;
  }

  virtual ~bbipProcessor() {}
};

class bbipProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  bbipProcessorFactory(const ::boost::shared_ptr< bbipIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< bbipIfFactory > handlerFactory_;
};

class bbipMultiface : virtual public bbipIf {
 public:
  bbipMultiface(std::vector<boost::shared_ptr<bbipIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~bbipMultiface() {}
 protected:
  std::vector<boost::shared_ptr<bbipIf> > ifaces_;
  bbipMultiface() {}
  void add(boost::shared_ptr<bbipIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  int32_t count() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->count();
    }
    return ifaces_[i]->count();
  }

  void query(bbip_result& _return, const std::string& string_ip) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query(_return, string_ip);
    }
    ifaces_[i]->query(_return, string_ip);
    return;
  }

  void query_string(std::string& _return, const std::string& string_ip) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query_string(_return, string_ip);
    }
    ifaces_[i]->query_string(_return, string_ip);
    return;
  }

  int16_t GetAreaFlag(const std::string& string_ip) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAreaFlag(string_ip);
    }
    return ifaces_[i]->GetAreaFlag(string_ip);
  }

  int64_t GetZoneID(const std::string& string_ip) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetZoneID(string_ip);
    }
    return ifaces_[i]->GetZoneID(string_ip);
  }

  void query_long(bbip_result& _return, const int64_t int_ip) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query_long(_return, int_ip);
    }
    ifaces_[i]->query_long(_return, int_ip);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class bbipConcurrentClient : virtual public bbipIf {
 public:
  bbipConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  bbipConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  int32_t count();
  int32_t send_count();
  int32_t recv_count(const int32_t seqid);
  void query(bbip_result& _return, const std::string& string_ip);
  int32_t send_query(const std::string& string_ip);
  void recv_query(bbip_result& _return, const int32_t seqid);
  void query_string(std::string& _return, const std::string& string_ip);
  int32_t send_query_string(const std::string& string_ip);
  void recv_query_string(std::string& _return, const int32_t seqid);
  int16_t GetAreaFlag(const std::string& string_ip);
  int32_t send_GetAreaFlag(const std::string& string_ip);
  int16_t recv_GetAreaFlag(const int32_t seqid);
  int64_t GetZoneID(const std::string& string_ip);
  int32_t send_GetZoneID(const std::string& string_ip);
  int64_t recv_GetZoneID(const int32_t seqid);
  void query_long(bbip_result& _return, const int64_t int_ip);
  int32_t send_query_long(const int64_t int_ip);
  void recv_query_long(bbip_result& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
